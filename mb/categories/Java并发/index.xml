<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java并发 on 程序猫大刚</title><link>/mb/categories/Java%E5%B9%B6%E5%8F%91/</link><description>Recent content in Java并发 on 程序猫大刚</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 17 Jul 2022 16:44:52 +0800</lastBuildDate><atom:link href="/mb/categories/Java%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Java同步控制</title><link>/mb/post/juc/Java%E5%90%8C%E6%AD%A5%E6%8E%A7%E5%88%B6/</link><pubDate>Sun, 17 Jul 2022 16:44:52 +0800</pubDate><guid>/mb/post/juc/Java%E5%90%8C%E6%AD%A5%E6%8E%A7%E5%88%B6/</guid><description>关键字Synchronized 关键字Synchronized、Object.wat()和Object.notify()是在jdk1.5之前用的多线程同步控制的方式，jdk1.5之后就提供了如下的jav</description></item><item><title>并行程序基础</title><link>/mb/post/juc/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 11 Jul 2022 11:49:35 +0800</pubDate><guid>/mb/post/juc/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</guid><description>程序、进程、线程 线程的生命周期 线程的状态图 线程的基本操作 线程组 守护线程 优先级 参考文档 书籍：葛一鸣 *《Java高并发程序设计第二版》</description></item><item><title>初识Java内存模型JMM</title><link>/mb/post/juc/%E5%88%9D%E8%AF%86Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/</link><pubDate>Wed, 06 Jul 2022 11:22:04 +0800</pubDate><guid>/mb/post/juc/%E5%88%9D%E8%AF%86Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/</guid><description>原子性、可见性、有序性 什么是指令重排，为什么需要？ 要搞懂指令重排，首先要知道一条指令在CPU内是如何执行的，如下图约5个步骤。 为了加快指令并行速度，CPU硬件支持了流水线技术。 不同的指令步骤执行在不同</description></item><item><title>Java关键字volatile</title><link>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97volatile/</link><pubDate>Tue, 05 Jul 2022 10:38:54 +0800</pubDate><guid>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97volatile/</guid><description>Java关键字volatile 提纲 定义 语义上，volatile是表示易变的、不确定的。 功能上，是Java提供的最轻量级的同步机制。 前因：从CPU缓存架构类比JMM线程工作内存和主内存关系 要弄懂如何保证</description></item><item><title>走入并行的世界</title><link>/mb/post/juc/%E8%B5%B0%E5%85%A5%E5%B9%B6%E8%A1%8C%E7%9A%84%E4%B8%96%E7%95%8C/</link><pubDate>Fri, 01 Jul 2022 10:33:34 +0800</pubDate><guid>/mb/post/juc/%E8%B5%B0%E5%85%A5%E5%B9%B6%E8%A1%8C%E7%9A%84%E4%B8%96%E7%95%8C/</guid><description>走入并行的世界 这该死的并行 摩尔定律发展 一些基本概念 同步 vs 异步 并发 vs 并行 临界区 多个线程的公共资源，或者说共享数据。 阻塞 vs 非阻塞 死锁、饥饿、活锁 并发级别 并行加速比公式 参考文档 书籍：葛一鸣 *《Java高并发</description></item><item><title>线程池入门到精通</title><link>/mb/post/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</link><pubDate>Tue, 28 Jun 2022 16:38:30 +0800</pubDate><guid>/mb/post/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</guid><description>什么是线程池 复用创建好的线程，节约创建和销毁的时间。 需要使用线程时，就从池子里拿一个空闲的线程，完成工作后，归还线程给线程池。 线程池工作原理 线程池工作流程 线程池生命周期及扩展点 线程池参数 JDK提供的线</description></item></channel></rss>