<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 程序猫大刚</title><link>/mb/post/</link><description>Recent content in Posts on 程序猫大刚</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 27 Sep 2022 23:27:02 +0800</lastBuildDate><atom:link href="/mb/post/index.xml" rel="self" type="application/rss+xml"/><item><title>熟悉JVM内存区域</title><link>/mb/post/jvm/%E7%86%9F%E6%82%89JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</link><pubDate>Tue, 27 Sep 2022 23:27:02 +0800</pubDate><guid>/mb/post/jvm/%E7%86%9F%E6%82%89JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</guid><description>Java运行时数据区 如下内容如未说明均以JDK1.7版本为准 JVM内存主要分为5个部分： 程序计数器 虚拟机栈 本地方法栈 堆 方法区 而JDK1.8和JDK1.7比，主要是将方法区（永久代） 被 元数据区取代，而且</description></item><item><title>HotSpot垃圾算法实现之并发的可达性分析</title><link>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90/</link><pubDate>Mon, 26 Sep 2022 22:37:18 +0800</pubDate><guid>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90/</guid><description>并发的可达性分析 根可达算法在理论上，需要冻结全部的用户线程运行。在根节点枚举步骤中，由于GC Roots相比整个Java堆中全部对象毕竟是极少数，且在OopMap优化下，带来的停顿时间非常短暂且相等固定</description></item><item><title>HotSpot垃圾算法实现之记忆集与卡表和写屏障</title><link>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%AE%B0%E5%BF%86%E9%9B%86%E4%B8%8E%E5%8D%A1%E8%A1%A8%E5%92%8C%E5%86%99%E5%B1%8F%E9%9A%9C/</link><pubDate>Thu, 01 Sep 2022 18:45:53 +0800</pubDate><guid>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E8%AE%B0%E5%BF%86%E9%9B%86%E4%B8%8E%E5%8D%A1%E8%A1%A8%E5%92%8C%E5%86%99%E5%B1%8F%E9%9A%9C/</guid><description>问题一：对象跨代（区域）引用，GC Roots扫描范围如何界定？ 当部分区域进行垃圾收集时，如果非收集区域的对象跨区引用了收集区域的对象（收集区域的对象A可能被非收集区域的对象静态字段B引用，这样对象A应</description></item><item><title>HotSpot垃圾算法实现之枚举根节点和安全点安全区域</title><link>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%9E%9A%E4%B8%BE%E6%A0%B9%E8%8A%82%E7%82%B9%E5%92%8C%E5%AE%89%E5%85%A8%E7%82%B9%E5%AE%89%E5%85%A8%E5%8C%BA%E5%9F%9F/</link><pubDate>Thu, 01 Sep 2022 18:37:32 +0800</pubDate><guid>/mb/post/jvm/HotSpot%E5%9E%83%E5%9C%BE%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%9E%9A%E4%B8%BE%E6%A0%B9%E8%8A%82%E7%82%B9%E5%92%8C%E5%AE%89%E5%85%A8%E7%82%B9%E5%AE%89%E5%85%A8%E5%8C%BA%E5%9F%9F/</guid><description>在根可达性分析算法中，从GC Roots集合中找引用链是虚拟机高效实现的第一个例子。 问题一：为什么要枚举根节点？怎么高效实现？ 虽然GC Roots的节点主要在全局性的引用（例如常量或者类静态变量）与执行上</description></item><item><title>类加载器</title><link>/mb/post/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link><pubDate>Thu, 01 Sep 2022 18:21:53 +0800</pubDate><guid>/mb/post/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid><description>定义 Java虚拟机通过一个类的全限定名来获取类的二进制字节流的这个动作，放到虚拟机外部实现，让应用程序自己决定如何获取所需的类。 实现这个动作的代码叫做类加载器。 类与类加载器 每个类加载器都有自己独立的类</description></item><item><title>熟悉Java类文件class结构</title><link>/mb/post/jvm/%E7%86%9F%E6%82%89Java%E7%B1%BB%E6%96%87%E4%BB%B6class%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 01 Sep 2022 00:27:48 +0800</pubDate><guid>/mb/post/jvm/%E7%86%9F%E6%82%89Java%E7%B1%BB%E6%96%87%E4%BB%B6class%E7%BB%93%E6%9E%84/</guid><description>Java基于Class文件作为存储格式，不同平台对应虚拟机实现的方式让Java具备跨平台的特性。 因此我们有必要更深入学习Class字节码文件的结构。 Class文件的结构 Class文件是一组以8个字节为</description></item><item><title>熟悉JVM字节码指令</title><link>/mb/post/jvm/%E7%86%9F%E6%82%89JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</link><pubDate>Thu, 01 Sep 2022 00:19:31 +0800</pubDate><guid>/mb/post/jvm/%E7%86%9F%E6%82%89JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</guid><description>简介 Java虚拟机的指令由一个字节长度（256个操作码）的、代表着特定操作含义的数字（操作码，Opcode）和跟随其后的零至多个代表其操作需要的参数（操作数，Operand）构成。 由于Java虚拟机采</description></item><item><title>MacOs10.15.7编译openjdk8u</title><link>/mb/post/jvm/MacOs10_15_7%E7%BC%96%E8%AF%91openjdk8u/</link><pubDate>Mon, 22 Aug 2022 22:40:21 +0800</pubDate><guid>/mb/post/jvm/MacOs10_15_7%E7%BC%96%E8%AF%91openjdk8u/</guid><description>Mac10.15.7上编译OpenJDK8u 机器环境及依赖 操作系统：macOs 10.15.7 BootJDK: /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home XCode：Version 11.3.1 (11C505) hg命令(mercurial): brew install mercurial freetype: brew install freetype 注意：笔者先前打算编译jdk8，一番折腾</description></item><item><title>内存分配与回收策略</title><link>/mb/post/jvm/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</link><pubDate>Sat, 20 Aug 2022 10:36:03 +0800</pubDate><guid>/mb/post/jvm/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5/</guid><description>前提环境 笔者JDK版本如下，如果不做指定的话，64为虚拟机1.8版本默认使用的ParallelGC垃圾收集器。 $ java -XX:+PrintCommandLineFlags -version -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC java version &amp;quot;1.8.0_221&amp;quot; Java(TM) SE Runtime Environment (build 1.8.0_221-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode) 使用-XX:+UseSerialG</description></item><item><title>垃圾收集算法</title><link>/mb/post/jvm/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 20 Aug 2022 10:22:08 +0800</pubDate><guid>/mb/post/jvm/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</guid><description>分代收集理论 3个假说 弱分代假说：绝大多数对象都是朝生夕灭的。（设计了年轻代） 强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡。（设计了老年代） 跨代引用假说：跨代引用相对于同代引用仅占极少数。（实际</description></item><item><title>虚拟机相关工具</title><link>/mb/post/jvm/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/</link><pubDate>Sat, 20 Aug 2022 09:40:53 +0800</pubDate><guid>/mb/post/jvm/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/</guid><description>本文主要是为了介绍虚拟机相关的工具，包括故障处理、性能监控和一些其他工具。 故障处理工具 名称 全称 作用及描述 jps JVM Process Status Tool 显示指定系统内所有的HotSpot虚拟机进程 jstat JVM Statistics Monitoring Tool 用于收集HotSpot虚拟机各方</description></item><item><title>IDEA的启动速度优化</title><link>/mb/post/idea/IDEA%E7%9A%84%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</link><pubDate>Thu, 18 Aug 2022 22:40:42 +0800</pubDate><guid>/mb/post/idea/IDEA%E7%9A%84%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</guid><description>前言 如果发现自己的IDE很慢，或者卡顿，那么就对它来一次调优吧。本人使用的是IDEA，如果是Eclipse的同学，可查找对应相关资料，本文仅供参考。 安装启动信息插件 笔者查找资料后，开发了IDEA启动信</description></item><item><title>回收堆和方法区中对象</title><link>/mb/post/jvm/%E5%9B%9E%E6%94%B6%E5%A0%86%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BA%E4%B8%AD%E5%AF%B9%E8%B1%A1/</link><pubDate>Fri, 12 Aug 2022 10:54:26 +0800</pubDate><guid>/mb/post/jvm/%E5%9B%9E%E6%94%B6%E5%A0%86%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BA%E4%B8%AD%E5%AF%B9%E8%B1%A1/</guid><description>哪些区域需要垃圾收集 在熟悉Java内存区域文中，知道了JVM运行时数据区有堆、方法区、虚拟机栈、本地方法栈和程序计数器5个部分，后3个部分都是线程私有的，其中的数据会跟随线程死亡自动回收，所以不需要垃</description></item><item><title>Java发展历史</title><link>/mb/post/jvm/Java%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</link><pubDate>Fri, 12 Aug 2022 10:30:06 +0800</pubDate><guid>/mb/post/jvm/Java%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</guid><description>Java发展历史 1995年5月23 Oak语言更名为Java 1996年1月23 JDK 1.0发布 1997年2月19日JDK 1.1发布 技术代表：JDBC，JAR文件格式，JavaBeans，RMI。 1998年1</description></item><item><title>垃圾判定算法与4大引用</title><link>/mb/post/jvm/%E5%9E%83%E5%9C%BE%E5%88%A4%E5%AE%9A%E7%AE%97%E6%B3%95%E4%B8%8E4%E5%A4%A7%E5%BC%95%E7%94%A8/</link><pubDate>Wed, 10 Aug 2022 22:13:41 +0800</pubDate><guid>/mb/post/jvm/%E5%9E%83%E5%9C%BE%E5%88%A4%E5%AE%9A%E7%AE%97%E6%B3%95%E4%B8%8E4%E5%A4%A7%E5%BC%95%E7%94%A8/</guid><description>哪些区域需要垃圾收集 在熟悉Java内存区域文中，指出了JVM运行时数据区有堆、方法区、虚拟机栈、本地方法栈和程序计数器5个部分，后3个部分都是线程私有的，其中的数据会跟随线程死亡自动回收，所以不需要垃</description></item><item><title>如何计算Java对象的大小</title><link>/mb/post/jvm/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%A7%E5%B0%8F/</link><pubDate>Tue, 09 Aug 2022 18:11:01 +0800</pubDate><guid>/mb/post/jvm/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%A7%E5%B0%8F/</guid><description>关键点 Java对象的布局结构 借助jol-core包来打印对象 引用的指针压缩 对象布局 Java对象布局（Java Object Layout） String对象例子 int[]数组对象例子 引用的指针压缩 JVM内存寻址最大内</description></item><item><title>熟悉HotSpot中的对象</title><link>/mb/post/jvm/%E7%86%9F%E6%82%89HotSpot%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</link><pubDate>Tue, 09 Aug 2022 17:50:54 +0800</pubDate><guid>/mb/post/jvm/%E7%86%9F%E6%82%89HotSpot%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</guid><description>对象的内存布局 在HotSpot虚拟机中，对象的内存布局分为以下3个区域： 对象头 实例数据 对齐填充 对象头 对象头包含Mark Word和类型指针2个部分。如果是数组对象，则有一部分存储数组的长度。 Mark Word中</description></item><item><title>如何阅读一本书</title><link>/mb/post/booknote/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</link><pubDate>Fri, 05 Aug 2022 18:35:50 +0800</pubDate><guid>/mb/post/booknote/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</guid><description>阅读时间：2022-08月 读后评价 这是一本教人如何阅读的工具书，旨在让人们做一个有自我要求的读者，增加自己的理解力。 书中讲阅读分为如下4个层次， 基础阅读 - 读完小学6年级后就应该具备的层次，认识字，知道</description></item><item><title>笨办法学python3</title><link>/mb/post/booknote/%E7%AC%A8%E5%8A%9E%E6%B3%95%E5%AD%A6python3/</link><pubDate>Fri, 05 Aug 2022 11:40:20 +0800</pubDate><guid>/mb/post/booknote/%E7%AC%A8%E5%8A%9E%E6%B3%95%E5%AD%A6python3/</guid><description>读后评价 《笨办法学Python3》是一本适合Python3的初学者实用性书籍，以52个练习题为章节讲述了Python3的基础知识，包括基本语法、控制流程、列表、字典、元组、面向对象（类，模块）、异常、</description></item><item><title>并发模式之异步回调Future模式</title><link>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83Future%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 28 Jul 2022 10:42:57 +0800</pubDate><guid>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83Future%E6%A8%A1%E5%BC%8F/</guid><description>Future模式（异步获取结果，自实现） 传统串行流程如下： 在获取数据时会阻塞等待，拿到数据后再执行其他的任务。 而Future模式会立即返回一个凭证（Future），这时可以执行其他任务；等需要数据再通</description></item><item><title>并发模式之生产者消费者模式</title><link>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 28 Jul 2022 09:54:19 +0800</pubDate><guid>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>生产者 - 消费者模式 生产者消费者模式是一个经典的多线程设计模式。 总结： 生产者线程将任务提交到内存缓冲区，消费者线程从内存缓冲区获取任务并执行。 通过内存缓冲区，避免了生成者和消费者直接通信，从而将生产者和</description></item><item><title>并发模式之单例和不变模式</title><link>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E5%92%8C%E4%B8%8D%E5%8F%98%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 28 Jul 2022 09:53:21 +0800</pubDate><guid>/mb/post/juc/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E5%92%8C%E4%B8%8D%E5%8F%98%E6%A8%A1%E5%BC%8F/</guid><description>单例模式 单例模式是为了确保系统中某个类只存在一个实例。 在多种写法中，推荐使用静态内部类方式，利用类加载一次特性确保只有一个实例（线程安全）， 同时具备无锁和懒创建优点。 示例： public class StaticInnerClassSingleton { // 私有化构造方法 private StaticInnerClassSingleton(){}</description></item><item><title>Java关键字synchronized</title><link>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97synchronized/</link><pubDate>Sun, 24 Jul 2022 00:10:19 +0800</pubDate><guid>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97synchronized/</guid><description>提纲 定义 synchronized是同步块，实现了多线程间的互斥同步。它修饰的代码，确保任一时刻只有一个线程进入访问。 特性 因为在synchronized同步块内，只有一个线程能访问，因此确保了同步块内的</description></item><item><title>Java的线程实现</title><link>/mb/post/juc/Java%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/</link><pubDate>Wed, 20 Jul 2022 22:09:06 +0800</pubDate><guid>/mb/post/juc/Java%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/</guid><description>Java线程是如何实现的？ 当我们追踪Java线程的实现时，可以发现Thread类的start方法最后会运行一个start0方法，而这个方法是native的，也就是交由JDK来实现的（JDK会屏蔽调底层</description></item><item><title>Java关键字之volatile</title><link>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bvolatile/</link><pubDate>Tue, 19 Jul 2022 23:28:21 +0800</pubDate><guid>/mb/post/juc/Java%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bvolatile/</guid><description>提纲 定义 语义上，volatile是表示易变的、不确定的。 功能上，是Java提供的最轻量级的同步机制。 前因：从CPU缓存架构类比JMM线程工作内存和主内存关系 要弄懂如何保证可见性的，请看下图，左侧是CP</description></item><item><title>Java多线程同步控制方法</title><link>/mb/post/juc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 17 Jul 2022 16:44:52 +0800</pubDate><guid>/mb/post/juc/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</guid><description>关键字Synchronized 关键字Synchronized、Object.wat()和Object.notify()是在jdk1.5之前用的多线程同步控制的方式，jdk1.5之后就提供了如下的jav</description></item><item><title>并行程序基础</title><link>/mb/post/juc/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 11 Jul 2022 11:49:35 +0800</pubDate><guid>/mb/post/juc/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</guid><description>程序、进程、线程 线程的生命周期 线程的状态图 线程的基本操作 线程组 守护线程 优先级 参考文档 书籍：葛一鸣 *《Java高并发程序设计第二版》</description></item><item><title>深入类加载机制</title><link>/mb/post/jvm/%E6%B7%B1%E5%85%A5%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link><pubDate>Fri, 08 Jul 2022 12:16:51 +0800</pubDate><guid>/mb/post/jvm/%E6%B7%B1%E5%85%A5%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid><description>类的生命周期 加载 验证 文件格式验证，元数据验证（语义校验），字节码验证（逻辑校验），符号引用校验 准备 为类变量(static的）分配内存并赋初始值。 解析 主要针对： 类或接口：CONSTANT_Class_i</description></item><item><title>熟悉Java内存模型JMM</title><link>/mb/post/juc/%E7%86%9F%E6%82%89Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/</link><pubDate>Wed, 06 Jul 2022 11:22:04 +0800</pubDate><guid>/mb/post/juc/%E7%86%9F%E6%82%89Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8BJMM/</guid><description>Java内存模型规范（JSR-133）是围绕原子性、可见性和有序性展开的。 原子性、可见性、有序性 如下图说明了Java线程、工作内存和主存之前的关系。 Java内存模型（JMM）定义了一套自己的主存到工作</description></item><item><title>走入并行的世界</title><link>/mb/post/juc/%E8%B5%B0%E5%85%A5%E5%B9%B6%E8%A1%8C%E7%9A%84%E4%B8%96%E7%95%8C/</link><pubDate>Fri, 01 Jul 2022 10:33:34 +0800</pubDate><guid>/mb/post/juc/%E8%B5%B0%E5%85%A5%E5%B9%B6%E8%A1%8C%E7%9A%84%E4%B8%96%E7%95%8C/</guid><description>走入并行的世界 这该死的并行 摩尔定律发展 一些基本概念 同步 vs 异步 并发 vs 并行 临界区 多个线程的公共资源，或者说共享数据。 阻塞 vs 非阻塞 死锁、饥饿、活锁 并发级别 并行加速比公式 参考文档 书籍：葛一鸣 *《Java高并发</description></item><item><title>线程池入门到精通</title><link>/mb/post/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</link><pubDate>Tue, 28 Jun 2022 16:38:30 +0800</pubDate><guid>/mb/post/juc/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</guid><description>什么是线程池 复用创建好的线程，节约创建和销毁的时间。 需要使用线程时，就从池子里拿一个空闲的线程，完成工作后，归还线程给线程池。 线程池工作原理 线程池工作流程 线程池生命周期及扩展点 线程池参数 JDK提供的线</description></item><item><title>Java本地方法调用</title><link>/mb/post/java/java%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</link><pubDate>Tue, 24 May 2022 23:08:25 +0800</pubDate><guid>/mb/post/java/java%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</guid><description>引子 Class.forName(&amp;quot;com.msql.jdbc.Driver&amp;quot;); 我们在加载mysql的jdbc驱动时，会主动加载对应的驱动类，然后使用DriverManager来获取连接操作数据库。 跟进forName的实现会发现是调用的native方法来实现的，也就是JNI</description></item><item><title>千呼万唤始出来的IDEA笔记插件mdNote</title><link>/mb/post/idea/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%E7%9A%84IDEA%E7%AC%94%E8%AE%B0%E6%8F%92%E4%BB%B6mdNote/</link><pubDate>Tue, 01 Mar 2022 18:28:39 +0800</pubDate><guid>/mb/post/idea/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%E7%9A%84IDEA%E7%AC%94%E8%AE%B0%E6%8F%92%E4%BB%B6mdNote/</guid><description>前言 最近工作上在做IDEA插件开发的东西，所以需要深入学习。在网上看到一个比较好的例子，实现一个笔记插件，故实现后发布这篇博客，分享给同样在学习的你。 （mdNote插件下载地址：https://man</description></item><item><title>开发第一个IDE插件</title><link>/mb/post/idea/%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AAIDE%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 22 Jan 2022 22:45:27 +0800</pubDate><guid>/mb/post/idea/%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AAIDE%E6%8F%92%E4%BB%B6/</guid><description>前言 问：为什么要开发idea插件呢？ 答：你一定用过很多idea插件，比如ideaVim,Maven,lombok,markdown等。 这些都是插件，安装后你的idea就能获得对应的能力。 现在想象你是一</description></item><item><title>Spring Cloud的链路监控之Zipkin</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E4%B9%8BZipkin/</link><pubDate>Sat, 22 Jan 2022 12:26:36 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E4%B9%8BZipkin/</guid><description>zipkin简介 Zipkin是Twitter开源的分布式跟踪系统，基于Dapper的论文设计而来。它的主要功能是收集系统的时序数据，从而追踪微服务架构的系统延时等问题。 官网：http://zipkin</description></item><item><title>Spring Cloud的链路监控之Sleuth</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E4%B9%8BSleuth/</link><pubDate>Sat, 22 Jan 2022 12:25:00 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E4%B9%8BSleuth/</guid><description>前言 如果微服务调用出错了，如果快速定位问题呢？ Spring Cloud提供Sleuth来实现调用链监控。 Sleuth基础概念 (1) Span（跨度）: 基本工作单元。span用一个64位的id唯一标识。除ID外，span</description></item><item><title>Spring Cloud Config配置刷新</title><link>/mb/post/springcloud/Spring-Cloud-Config%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/</link><pubDate>Sat, 22 Jan 2022 12:22:58 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud-Config%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/</guid><description>配置刷新 实际项目中，加入了配置中心后，config client都连接config server，config server 连接git仓库（或者其他存储），配置修改后需要更新到config client。 如此，conf</description></item><item><title>Spring Cloud配置中心之Config Server</title><link>/mb/post/springcloud/Spring-Cloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8BConfig-Server/</link><pubDate>Sat, 22 Jan 2022 12:18:36 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B9%8BConfig-Server/</guid><description>spring cloud config简介 Spring Cloud Config为分布式系统外部化配置提供了服务器端和客户端的支持，它包括Config Server和Config Client两部分。 Config Server是一个可横向扩展、集中式的配置服务</description></item><item><title>Spring Cloud的网关之Zuul</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%BD%91%E5%85%B3%E4%B9%8BZuul/</link><pubDate>Sat, 22 Jan 2022 10:58:06 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%BD%91%E5%85%B3%E4%B9%8BZuul/</guid><description>本文只是简单的zuul入门，尝尝鲜！ Zuul简介 Zuul是Netflix开源的微服务网关，它可以和Eureka、Ribbon、Hystrix等组件配合使用。Zuul的核心是一系列的过滤器，这些过滤器帮</description></item><item><title>Spring Cloud的熔断器监控</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8%E7%9B%91%E6%8E%A7/</link><pubDate>Fri, 21 Jan 2022 23:19:48 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8%E7%9B%91%E6%8E%A7/</guid><description>Hystrix监控 actuator的监控节点 在actuator下有用来监控hystrix的端点/actuator/hystrix.stream。 访问： http://localhost:9202/actuator/hystrix.stream 输出：(注意监控时需要请求@HystrixCom</description></item><item><title>Spring Cloud熔断器之Hystrix</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8%E4%B9%8BHystrix/</link><pubDate>Fri, 21 Jan 2022 23:15:24 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8%E4%B9%8BHystrix/</guid><description>Hystrix介绍 Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。 Hystrix特性 Hystrix主要通过以</description></item><item><title>Spring Cloud的熔断器</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8/</link><pubDate>Fri, 21 Jan 2022 23:12:22 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E7%86%94%E6%96%AD%E5%99%A8/</guid><description>熔断器介绍 为什么需要熔断器 当一个调用，里面跟着调用其他微服务时，其他微服务不可用，就会阻塞调用线程，从而可能导致调用链路前的微服务不可用，最终导致雪崩。（雪崩效应） 这个时候就需要有熔断机制作为保护。 熔</description></item><item><title>Spring Cloud的服务调用之Feign</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E4%B9%8BFeign/</link><pubDate>Fri, 21 Jan 2022 22:51:51 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E4%B9%8BFeign/</guid><description>Feign介绍 如果只用Ribbon里的RestTemplate来调用，会发现URL，参数返回值等都需要写死。 1 2 3 4 ResultObject&amp;lt;CardVo&amp;gt; result = (ResultObject&amp;lt;CardVo&amp;gt;) restTemplate.getForObject( &amp;#34;http://mic-card/card/admin/card/rand&amp;#34;, ResultObject.class ); 如果服务提供者做了调整，则代码变得难以维护。 Feign组件出现，声明</description></item><item><title>SpringCloud的负载均衡之Ribbon</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8BRibbon/</link><pubDate>Fri, 21 Jan 2022 22:45:53 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8BRibbon/</guid><description>Ribbon介绍 Ribbon是Netfix发布的负载均衡器。 为Ribbon配置服务提供者地址后，基于负载均衡算法（内置轮询，随机等），自动帮消费者去请求。 集成Ribbon 注意本文使用的版本： 1 2 &amp;lt;spring-cloud.version&amp;gt;Hoxton.SR10&amp;lt;/spring-cloud.version&amp;gt; &amp;lt;spring-boot-version&amp;gt;2.2.7.RELEASE&amp;lt;/spring-boot-version&amp;gt; 前</description></item><item><title>Spring Cloud注册中心之Eureka</title><link>/mb/post/springcloud/Spring-Cloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B9%8BEureka/</link><pubDate>Thu, 20 Jan 2022 00:12:17 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B9%8BEureka/</guid><description>Eureka介绍 Spring Cloud Euraka是Spring Cloud集合中一个组件，它是对Euraka的集成，用于服务注册和发现。Eureka是Netflix中的一个开源框架。它和 zookeeper、Consul</description></item><item><title>Spring Cloud的注册中心</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link><pubDate>Wed, 19 Jan 2022 23:29:48 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid><description>分布式系统CAP理论 Consistency 一致性:所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本） Availability 可用性:在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备</description></item><item><title>Spring Cloud的5大核心组件</title><link>/mb/post/springcloud/Spring-Cloud%E7%9A%845%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</link><pubDate>Wed, 19 Jan 2022 23:24:34 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E7%9A%845%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</guid><description>Spring Cloud 架构图 Spring Cloud的5大核心组件 注册中心 - Eureka , Consul 负载均衡 - Ribbon 服务调用 - Feign 网关 - Zuul 熔断器 - Hystrix Spring Cloud Alibaba的核心组件 注册中心 - Nacos 负责均衡 - Ribbon 服务调用 - Feign 网关 - Gateway 熔断器 - Sentinel 其他组件 服务配置 - Config , Nacos</description></item><item><title>Spring Cloud集成Admin Server</title><link>/mb/post/springcloud/Spring-Cloud%E9%9B%86%E6%88%90Admin-Server/</link><pubDate>Wed, 19 Jan 2022 12:29:02 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E9%9B%86%E6%88%90Admin-Server/</guid><description>spring cloud集成spring boot admin server 在这篇文章Springboot集成Actuator和SpringbootAdminServer监控，我们学到了在spring boot应用中集成spring boot admin serv</description></item><item><title>Spring Cloud初识</title><link>/mb/post/springcloud/Spring-Cloud%E5%88%9D%E8%AF%86/</link><pubDate>Sun, 16 Jan 2022 19:27:32 +0800</pubDate><guid>/mb/post/springcloud/Spring-Cloud%E5%88%9D%E8%AF%86/</guid><description>微服务的出现 单体应用架构 从架构发展来看，单体应用架构存在很多问题： 复杂性高（项目包含多个模块，模块便捷不清，修改一个bug可能都会带来隐含的问题。） 技术债务（不坏不修） 部署评率低（全量部署耗时，出错概</description></item><item><title>发布jar包公共maven仓库</title><link>/mb/post/java/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%85%AC%E5%85%B1maven%E4%BB%93%E5%BA%93/</link><pubDate>Sat, 25 Dec 2021 22:18:49 +0800</pubDate><guid>/mb/post/java/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%85%AC%E5%85%B1maven%E4%BB%93%E5%BA%93/</guid><description>起因 自己写了个简单的框架，想要发布到公共的maven仓库上，方便自己引用，也给其他开发者创造一个轮子。 参考鸣谢 流程 https://blog.csdn.net/qq_36838191/article/details/81027586 操作 https://www.cnblogs.com/newsea/p/11604171.html 几个地址 工单管理: https://issues.sonatype.org 构件仓库: https://oss.sonatype.org/#welcome 仓库镜像: http://search.maven.org/ 发布流程 创建工单 发布jar包 审核通</description></item><item><title>腾讯云主机组建内网</title><link>/mb/post/handleway/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BB%E6%9C%BA%E7%BB%84%E5%BB%BA%E5%86%85%E7%BD%91/</link><pubDate>Fri, 26 Nov 2021 23:39:01 +0000</pubDate><guid>/mb/post/handleway/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BB%E6%9C%BA%E7%BB%84%E5%BB%BA%E5%86%85%E7%BD%91/</guid><description>因子 因为在腾讯云买了2个云主机，通过公网IP搭建了k8s集群后，每个月网络流量就在29元。所以寻求组建内网的方法，找到后通过内网IP重新搭建了k8s，节约了成本。直接上图，见证省钱事实。 11月25这一</description></item><item><title>k8s的相关发行版</title><link>/mb/post/k8s/k8s%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8F%91%E8%A1%8C%E7%89%88/</link><pubDate>Sun, 21 Nov 2021 22:24:23 +0000</pubDate><guid>/mb/post/k8s/k8s%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8F%91%E8%A1%8C%E7%89%88/</guid><description>因子 自2015年google开源kubernetes后，到目前为止市面上出现了很多发行版。大部分是国外的，也有国内的，下面探讨下一些最近接触到的。（全世界900多个linux发行版，30多个k8s发行</description></item><item><title>rancher的安装及使用</title><link>/mb/post/k8s/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 21 Nov 2021 22:21:49 +0000</pubDate><guid>/mb/post/k8s/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid><description>rancher介绍 时至今日，Rancher已经成长为企业在生产环境中运行容器和Kubernetes的首要选择。 同时也是为您提供跨任何基础设施部署Kubernetes即服务（Kubernetes-as–</description></item><item><title>k3s初识及安装</title><link>/mb/post/k8s/k3s%E5%88%9D%E8%AF%86%E5%8F%8A%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 21 Nov 2021 22:20:33 +0000</pubDate><guid>/mb/post/k8s/k3s%E5%88%9D%E8%AF%86%E5%8F%8A%E5%AE%89%E8%A3%85/</guid><description>2021-11-19 周5 介绍 k3s 是轻量级 Kubernetes，专为物联网和边缘计算构建的经过认证的 Kubernetes 发行版。 架构图： 优点 适合边缘计算 K3s 是一种高度可用、经过认证的 Kubernetes 发行版，专为无人值守、资源受限、远程位置或物联网设备内部的</description></item><item><title>k8s的web管理工具</title><link>/mb/post/k8s/k8s%E7%9A%84web%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 21 Nov 2021 22:15:03 +0000</pubDate><guid>/mb/post/k8s/k8s%E7%9A%84web%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>经过最近关于k8s管理工具的广度探索，了解到如下的管理工具，有的自己安装体验了，有的没有。如下列举出来的项目，推荐使用rancher。 另外本文不会详细说明各个项目如何安装，只做资料收集。 管理界面级 kube-dashboard -</description></item><item><title>k8s的命令行管理工具</title><link>/mb/post/k8s/k8s%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 21 Nov 2021 22:12:26 +0000</pubDate><guid>/mb/post/k8s/k8s%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>因子 k8s在2015年google开源之后，发展迅速，好多工具层出不穷。包括cmd工具和web端工具；本文主要关注cmd工具。 kubectl - k8s command client helm - k8s yaml package util k9s - k8s plus client kubectl 可以使用 Kubectl 命令行工具管理 Kubernetes 集群，kube</description></item><item><title>minikube安装k8s集群</title><link>/mb/post/k8s/minikube%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</link><pubDate>Sun, 21 Nov 2021 22:10:55 +0000</pubDate><guid>/mb/post/k8s/minikube%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</guid><description>minikube是一个工具， 能让你在本地运行 Kubernetes。minikube在你本地的个人计算机（包括 Windows、macOS 和 Linux PC）运行一个单节点的 Kubernetes 集群，以便你来尝试 Kubernetes 或者开展每天的开发</description></item><item><title>kubeadm安装k8s集群</title><link>/mb/post/k8s/kubeadm%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</link><pubDate>Sun, 21 Nov 2021 22:08:33 +0000</pubDate><guid>/mb/post/k8s/kubeadm%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</guid><description>安装前环境准备及说明 服务器资源 机器 IP OS 资源 master 172.31.1.100 CentOS Linux release 7.9.2009 (Core) 2C4G node1 172.30.1.100 CentOS Linux release 7.5.1804 (Core) 1C2G 以上环境为个人学习环境，企业生产环境建议最低配置在8C16G master且master高可用，至少2台8C16G的工作节点 服务</description></item><item><title>k8s初识</title><link>/mb/post/k8s/k8s%E5%88%9D%E8%AF%86/</link><pubDate>Thu, 18 Nov 2021 18:02:29 +0000</pubDate><guid>/mb/post/k8s/k8s%E5%88%9D%E8%AF%86/</guid><description>kubernetes是什么 kubernetes是一个google开源的容器编排平台，从创建应用，应用的部署，应用提供服务，扩容缩容应用，应用更新，都非常的方便，而且可以做到故障自愈，例如一个服务器挂了</description></item><item><title>docker-machine的使用和总结</title><link>/mb/post/docker/docker-machine%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 14 Nov 2021 22:41:23 +0000</pubDate><guid>/mb/post/docker/docker-machine%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%80%BB%E7%BB%93/</guid><description>因子 最近在整理博客内容，因为平时使用docker的时候，见到了三剑客中的docker-machine，也就开始使用了。虽然现在docker-machine已经被官方弃用，不再维护更新，但是个人觉得其隔</description></item><item><title>域名证书更新</title><link>/mb/post/handleway/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/</link><pubDate>Sun, 07 Nov 2021 14:24:08 +0000</pubDate><guid>/mb/post/handleway/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/</guid><description>因子 从15年买了云服务器开始，就开始折腾服务器这些事情。虽然买了域名，备案，ssl证书都得自己捯饬，才能让自己的个人项目跑在云端之上，也算是追赶上了全民上云的步伐。这不，每当到了双11期间，各种云服务</description></item><item><title>实现单例配置文件读取</title><link>/mb/post/handleway/%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</link><pubDate>Wed, 27 Oct 2021 22:15:46 +0000</pubDate><guid>/mb/post/handleway/%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</guid><description>2021-10-27 周三 缘起 最近开始使用Java编写Redis的项目Jmedis，给项目实现了单例的配置文件读取。 废话少说，直接上代码。 设计思路 未读取配置文件时，则使用代码内默认值。 采用格式 type@key=value ，实现反射设置配置对象属性</description></item><item><title>从何而来之Java NIO</title><link>/mb/post/java/%E4%BB%8E%E4%BD%95%E8%80%8C%E6%9D%A5%E4%B9%8BJava-NIO/</link><pubDate>Wed, 13 Oct 2021 22:29:37 +0000</pubDate><guid>/mb/post/java/%E4%BB%8E%E4%BD%95%E8%80%8C%E6%9D%A5%E4%B9%8BJava-NIO/</guid><description>缘起 最近在看《Java NIO》这本书，书中详细讲解了jdk1.4内提供的关于实现nio的API。因为阅读后，发现对于NIO还是学习的不够深入，之前也仅仅是学习了Java的文件IO和Socket编程，再</description></item><item><title>基于helm将芒果卡片部署到k8s</title><link>/mb/post/k8s/%E5%9F%BA%E4%BA%8Ehelm%E5%B0%86%E8%8A%92%E6%9E%9C%E5%8D%A1%E7%89%87%E9%83%A8%E7%BD%B2%E5%88%B0k8s/</link><pubDate>Fri, 27 Aug 2021 14:54:10 +0000</pubDate><guid>/mb/post/k8s/%E5%9F%BA%E4%BA%8Ehelm%E5%B0%86%E8%8A%92%E6%9E%9C%E5%8D%A1%E7%89%87%E9%83%A8%E7%BD%B2%E5%88%B0k8s/</guid><description>缘起 在工作中，因为一名姓万的项目管理者，对我们提出了个人项目小卡片的征集活动。我写了3个任务，读一本技术书籍，开发卡片项目V1.0版本，和考驾照。 到目前为止，基本已经完成。 读了有好几本技术数据，包括《</description></item><item><title>食物碘排行榜</title><link>/mb/post/me/%E9%A3%9F%E7%89%A9%E7%A2%98%E6%8E%92%E8%A1%8C%E6%A6%9C/</link><pubDate>Sun, 21 Mar 2021 15:21:52 +0000</pubDate><guid>/mb/post/me/%E9%A3%9F%E7%89%A9%E7%A2%98%E6%8E%92%E8%A1%8C%E6%A6%9C/</guid><description>含碘食物排行榜 1.裙带菜(干) (15878 微克) 2.紫菜(干) (4323 微克) 3.海带(鲜) (923 微克) 4.鸡精 766.5 微克) 5.海虹 (346 微克) 6.虾皮 (264.5 微克) 7.虾酱 (166.6 微克) 8.虾米 (82.5 微克) 9.可乐 (68.4 微克) 10.叉烧肉 (57.4 微克) 1</description></item><item><title>Java临时文件删除时注意的坑</title><link>/mb/post/java/Java%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91/</link><pubDate>Tue, 05 Jan 2021 18:56:13 +0000</pubDate><guid>/mb/post/java/Java%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%97%B6%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91/</guid><description>前言 最近在生产环境上发现了临时目录堆积吃掉大量磁盘的问题，最终原因是代码有Bug，异常后未执行delete file的代码或者执行了，但是删除失败。 解决思路 将删除文件的代码放到finally块中。 确保删</description></item><item><title>springboot集成logback做日志分割</title><link>/mb/post/springboot/springboot%E9%9B%86%E6%88%90logback%E5%81%9A%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/</link><pubDate>Sun, 15 Nov 2020 21:00:21 +0000</pubDate><guid>/mb/post/springboot/springboot%E9%9B%86%E6%88%90logback%E5%81%9A%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/</guid><description>前提 logback和log4j都能实现如下功能，下方给出logback配置。（测试是否更新。） 日志按天切割，并且设置最大容量。 日志配置文件修改，能热加载。 日志按包前缀分文件。（也能实现） logback</description></item><item><title>apache-tomcat-8.0.43源码编译</title><link>/mb/post/sourcecode/apache-tomcat-8-0-43%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</link><pubDate>Sun, 15 Nov 2020 17:07:13 +0000</pubDate><guid>/mb/post/sourcecode/apache-tomcat-8-0-43%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</guid><description>源码下载 到https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.43/src/ 下载对应版本源码，本文编译的是apache-tomcat-8.0.43</description></item><item><title>树莓派之系统安装初始化篇</title><link>/mb/post/respberrypi/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E7%AF%87/</link><pubDate>Sun, 15 Nov 2020 15:53:49 +0000</pubDate><guid>/mb/post/respberrypi/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96%E7%AF%87/</guid><description>1. 系统烧录 1.1 安装烧录软件 安装 Raspberry Pi OS using Raspberry Pi Imager软件，在官网地址下载对应自己系统的版本。 温馨提示： 查看官方提供的树莓派OS版本 可通过下方的custom的选项，将已经下载好的镜像文件选择，然后选择s</description></item><item><title>高吞吐量分布式消息系统kafka</title><link>/mb/post/middleware/%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9Fkafka/</link><pubDate>Mon, 02 Nov 2020 12:03:20 +0000</pubDate><guid>/mb/post/middleware/%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9Fkafka/</guid><description>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。 特性 Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性： 通过O(1)的磁盘数据结构提供消息的持久化，这种结</description></item><item><title>分布式存储FastDFS</title><link>/mb/post/middleware/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8FastDFS/</link><pubDate>Mon, 02 Nov 2020 11:46:25 +0000</pubDate><guid>/mb/post/middleware/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8FastDFS/</guid><description>介绍 FastDFS 是一个开源的高性能分布式文件系统（DFS），实现了文件存储，文件同步和文件访问，以及高容量和负载平衡等功能。FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(S</description></item><item><title>浅析内网穿透可行方案</title><link>/mb/post/handleway/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/</link><pubDate>Thu, 12 Mar 2020 11:13:12 +0000</pubDate><guid>/mb/post/handleway/%E6%B5%85%E6%9E%90%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8F%AF%E8%A1%8C%E6%96%B9%E6%A1%88/</guid><description>缘起 最近在做一个微信网站，需要和微信对接。发现开发的时候需要将自己电脑上的服务映射到公网上，才能接收到微信公众平台的回调。 因此，百度搜寻整理各种可行的内网穿透方案。 内网穿透原理 以下纯属个人理解，不保证</description></item><item><title>java之future异步并发体验</title><link>/mb/post/java/java%E4%B9%8Bfuture%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E4%BD%93%E9%AA%8C/</link><pubDate>Fri, 06 Mar 2020 11:36:48 +0000</pubDate><guid>/mb/post/java/java%E4%B9%8Bfuture%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91%E4%BD%93%E9%AA%8C/</guid><description>废话不多说，直接上代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package org.mango.demo; import cn.hutool.http.HttpUtil; import com.google.common.collect.Lists; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.concurrent.Callable; import java.util.concurrent.Executors; import java.util.stream.Collectors;</description></item><item><title>java之forkjoin体验</title><link>/mb/post/java/java%E4%B9%8Bforkjoin%E4%BD%93%E9%AA%8C/</link><pubDate>Fri, 06 Mar 2020 10:52:37 +0000</pubDate><guid>/mb/post/java/java%E4%B9%8Bforkjoin%E4%BD%93%E9%AA%8C/</guid><description>废话不多说，直接上代码！ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package org.mango.forkjoin; import cn.hutool.http.HttpUtil; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.concurrent.RecursiveTask; public class ServiceTask extends RecursiveTask&amp;lt;String&amp;gt; { private String url; public ServiceTask(String url){ this.url = url; } @Override protected String compute() { String result</description></item><item><title>java之深入jvm之路</title><link>/mb/post/java/java%E4%B9%8B%E6%B7%B1%E5%85%A5jvm%E4%B9%8B%E8%B7%AF/</link><pubDate>Sat, 14 Dec 2019 14:45:07 +0000</pubDate><guid>/mb/post/java/java%E4%B9%8B%E6%B7%B1%E5%85%A5jvm%E4%B9%8B%E8%B7%AF/</guid><description>1.仔细看一看java 1.1.java发展历史 1995年5月23 Oak语言更名为Java 1996年1月23 JDK 1.0发布 1997年2月19日JDK 1.1发布 技术代表：JDBC，JAR文件格式，JavaB</description></item><item><title>java日志门面</title><link>/mb/post/java/java%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2/</link><pubDate>Sat, 14 Dec 2019 13:44:06 +0000</pubDate><guid>/mb/post/java/java%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2/</guid><description>1.slf4j是什么 slf4j全称为Simple Logging Facade for Java ,即java简单日志门面，渐渐地替换调了apache common logging。 The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j) allowing the end user to plug in the desired logging framework at deployment time. 理</description></item><item><title>生病的日子</title><link>/mb/post/me/sickday/</link><pubDate>Thu, 12 Dec 2019 21:49:56 +0000</pubDate><guid>/mb/post/me/sickday/</guid><description>1.开端 2017年7月中下旬，在公司的一次体检中，我被甲状腺彩超医生告知甲状腺内有结节，并严肃地通知我尽快去大医院复查。 接下来的几天，虽然内心忐忑不安，但还是选择离工作位置较近的深圳市第二人民医院做了</description></item><item><title>nginx的负载均衡测试</title><link>/mb/post/nginx/nginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 07 Dec 2019 21:55:40 +0000</pubDate><guid>/mb/post/nginx/nginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/</guid><description>疑问 在nginx中配置的最基本的负载均衡配置，是不是其中一个服务挂掉了，用户还是能够正常访问系统？ 配置及环境 Nginx + node的http-server服务器 + 同一机器的2个端口web静态页服务 1 2 3 4 5 upstream web{</description></item><item><title>如何加快处理速度</title><link>/mb/post/handleway/%E5%A6%82%E4%BD%95%E5%8A%A0%E5%BF%AB%E5%A4%84%E7%90%86%E9%80%9F%E5%BA%A6/</link><pubDate>Fri, 06 Dec 2019 16:42:21 +0000</pubDate><guid>/mb/post/handleway/%E5%A6%82%E4%BD%95%E5%8A%A0%E5%BF%AB%E5%A4%84%E7%90%86%E9%80%9F%E5%BA%A6/</guid><description>1.场景 例如有一张成语字典表，数据在13000条左右，需要将数据经过处理存到另一个存储中（可以是数据库），如何才能加快处理速度？ 2.推荐工具 ETL工具kettle 3.解决方案 3.1.多线程互斥加快处理</description></item><item><title>关于一些问题的决定</title><link>/mb/post/handleway/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%B3%E5%AE%9A/</link><pubDate>Tue, 02 Oct 2018 10:47:28 +0000</pubDate><guid>/mb/post/handleway/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E5%86%B3%E5%AE%9A/</guid><description>如何列学习计划并保持执行有效？ 思维导图列计划，根据时间长度定义周期，并选择投入适当态度。有多个先定好优先级，切勿同时启动学习计划。 列计划可以使用思维导图软件，只用做列计划可以做成图，打印出来。切勿使用</description></item><item><title>maven打包dir目录暴露配置文件</title><link>/mb/post/java/maven%E6%89%93%E5%8C%85dir%E7%9B%AE%E5%BD%95%E6%9A%B4%E9%9C%B2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 13 Dec 2017 16:58:29 +0000</pubDate><guid>/mb/post/java/maven%E6%89%93%E5%8C%85dir%E7%9B%AE%E5%BD%95%E6%9A%B4%E9%9C%B2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>起因 在springboot框架下，打包项目发布最开始打包为整包，然后使用java -jar xxx.jar --spring.profiles.active=w2n的命令来启动。 但是之后更新项目时，都是以全量更新的方式，这样</description></item><item><title>maven模块划分之部署深入</title><link>/mb/post/java/maven%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%85%A5/</link><pubDate>Wed, 06 Dec 2017 17:24:20 +0000</pubDate><guid>/mb/post/java/maven%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%85%A5/</guid><description>时机 在代码之路上快快慢慢几个春秋之后，多多少少都会经历一些框架的更迭。多数都是好用替代繁琐，新技术替换老技术。此刻，正是刚刚好的时机，来深入maven模块合理感谢华哥，受益匪浅的一课。 技术框架时间线 jsp+servlet</description></item><item><title>springboot集成dubbo</title><link>/mb/post/springboot/springboot%E9%9B%86%E6%88%90dubbo/</link><pubDate>Mon, 06 Nov 2017 15:31:34 +0000</pubDate><guid>/mb/post/springboot/springboot%E9%9B%86%E6%88%90dubbo/</guid><description>pom.xml中加入springboot的dubbo启动依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.dubbo.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 加入dubbo的依赖接口jar包或者java文件 可以以jar包的方式引入，也可以用java文件来引入该dubbo的interfac</description></item><item><title>springboot多数据源mybatis版</title><link>/mb/post/springboot/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90mybatis%E7%89%88/</link><pubDate>Mon, 06 Nov 2017 15:12:34 +0000</pubDate><guid>/mb/post/springboot/springboot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90mybatis%E7%89%88/</guid><description>springboot多数据源 在项目中，一个程序可能需要连接多个数据源，来操作数据，所以需要多数据源的支持。 加入mybatis的springboot依赖 &amp;lt;!-- mybatis启动 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- mybatis pagehel</description></item><item><title>dubbo分布式服务框架剖析</title><link>/mb/post/middleware/dubbo%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/</link><pubDate>Thu, 27 Apr 2017 17:15:25 +0000</pubDate><guid>/mb/post/middleware/dubbo%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/</guid><description>Dubbo定位图 首先，要知道dubbo是处于mvc中的model层，将传统的单应用分解成分布式服务的架构。 Dubbo架构设计图 Dubbo注册中心 其中的注册中心，有3种实现，zookeeper，redi</description></item><item><title>17年4月份总结</title><link>/mb/post/me/17%E5%B9%B44%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 18 Apr 2017 21:04:28 +0000</pubDate><guid>/mb/post/me/17%E5%B9%B44%E6%9C%88%E4%BB%BD%E6%80%BB%E7%BB%93/</guid><description>生活 从毕业到现在，经历了一些终生痛苦的事情。让原本已经走出阴暗的人儿，又重新扎进过往。 思恋总是怕不够多，遗憾也总是无孔不入，想留住的人，想留住的东西，随一场意外而去，也 仿佛带走了我的心。自那以后，每当</description></item><item><title>新技术重点-commonjs,es6,react</title><link>/mb/post/handleway/%E6%96%B0%E6%8A%80%E6%9C%AF%E9%87%8D%E7%82%B9-commonjs-es6-react/</link><pubDate>Mon, 20 Feb 2017 16:45:53 +0000</pubDate><guid>/mb/post/handleway/%E6%96%B0%E6%8A%80%E6%9C%AF%E9%87%8D%E7%82%B9-commonjs-es6-react/</guid><description>commonjs 百度百科： CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标 准库。 自己的理解： 有点像Java的jdk，</description></item><item><title>xfire-1.2.6.jar和spring版本包冲突</title><link>/mb/post/exception/xfire-1-2-6-jar%E5%92%8Cspring%E7%89%88%E6%9C%AC%E5%8C%85%E5%86%B2%E7%AA%81/</link><pubDate>Fri, 17 Feb 2017 13:56:27 +0000</pubDate><guid>/mb/post/exception/xfire-1-2-6-jar%E5%92%8Cspring%E7%89%88%E6%9C%AC%E5%8C%85%E5%86%B2%E7%AA%81/</guid><description>问题场景描述 最近遇到一个异常，狠狠地坑了我连续10小时。 该问题描述： （环境） 1.maven的jeesite（spring+mybatis+shiro）环境下。 2.jetty:run能够正常启动。 3.放</description></item><item><title>mysql下的内容发布中文章的上一条和下一条解决方案</title><link>/mb/post/mysql/mysql%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%91%E5%B8%83%E4%B8%AD%E6%96%87%E7%AB%A0%E7%9A%84%E4%B8%8A%E4%B8%80%E6%9D%A1%E5%92%8C%E4%B8%8B%E4%B8%80%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 30 Dec 2016 17:37:50 +0000</pubDate><guid>/mb/post/mysql/mysql%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%91%E5%B8%83%E4%B8%AD%E6%96%87%E7%AB%A0%E7%9A%84%E4%B8%8A%E4%B8%80%E6%9D%A1%E5%92%8C%E4%B8%8B%E4%B8%80%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>问题场景 在内容发布系统中，都会有类似下图的需求。 遇到的问题 其实“上一条，下一条”的需求，转化到实现其实就是数据库的sql查询上了。 通过当前记录，查询到所在排序中的上一条记录，和下一条记录。 在oracl</description></item><item><title>基于solr的全文检索解决方案</title><link>/mb/post/middleware/%E5%9F%BA%E4%BA%8Esolr%E7%9A%84%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Wed, 09 Nov 2016 11:35:59 +0000</pubDate><guid>/mb/post/middleware/%E5%9F%BA%E4%BA%8Esolr%E7%9A%84%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>思路 在一堆数据中，给其建立全文索引，然后通过查询关键字，获取匹配的数据显示到界面条目。 基于solr的全文检索搭建 solr所处位置 Apache提供了全文检索引擎lucene，现已发展到6.2.X的版本。</description></item><item><title>mac上使用apache,http服务器</title><link>/mb/post/handleway/mac%E4%B8%8A%E4%BD%BF%E7%94%A8apache-http%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 04 Nov 2016 17:04:02 +0000</pubDate><guid>/mb/post/handleway/mac%E4%B8%8A%E4%BD%BF%E7%94%A8apache-http%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>安装Apache服务器 对于mac osx的系统，一般会预装好apache的httpd服务器的。 所以只需要使用启动和停止命令来操作。 如果没有安装httpd服务器，可以使用 yum install httpd来安装（在cento</description></item><item><title>alisql的my.cnf</title><link>/mb/post/alisql/alisql%E7%9A%84my-cnf/</link><pubDate>Fri, 04 Nov 2016 16:42:24 +0000</pubDate><guid>/mb/post/alisql/alisql%E7%9A%84my-cnf/</guid><description>[mysqld] socket = /tmp/mysql.sock datadir = /usr/local/mysql/data tmpdir = /tmp port = 3030 back_log = 3000 character_set_server = utf8 max_connect_errors = 100 max_connections = 650 max_user_connections = 650 max_heap_table_size = 64M max_allowed_packet = 1024M max_binlog_size = 500M thread_stack = 256K interactive_timeout = 7200 wait_timeout = 86400 sort_buffer_size = 704KB read_buffer_size = 704KB read_rnd_buffer_size = 352KB join_buffer_size = 352KB net_buffer_length = 16K thread_cache_size = 100 ft_min_word_len = 4 transaction_isolation = READ-COMMITTED tmp_table_size = 2097152 table_open_cache = 2000 skip_name_resolve core-file lower_case_table_names = 1 log_bin_trust_function_creators = 1 log-bin = /usr/local/mysql/data/mysql-bin.log log-bin-index = /usr/local/mysql/data/master-log-bin.index log-error = /usr/local/mysql/data/master-error.log relay-log = /usr/local/mysql/data/slave-relay.log relay-log-info-file = /usr/local/mysql/data/slave-relay-log.info relay-log-index</description></item><item><title>alisql的编译安装</title><link>/mb/post/alisql/alisql%E7%9A%84%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 04 Nov 2016 16:18:28 +0000</pubDate><guid>/mb/post/alisql/alisql%E7%9A%84%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</guid><description>专业阿里编译 请参考：alisql编译 写在前面 适用环境：mac os x(unix), linux 等 2016年阿里的云栖大会上，开源了alisql，称双11就是alisql的成功案例。而且还说vs mysql 5.7 ,性能有70%的提升。 不管真的假</description></item><item><title>mysql读写分离,中间件用mycat</title><link>/mb/post/mysql/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%94%A8mycat/</link><pubDate>Fri, 04 Nov 2016 16:01:17 +0000</pubDate><guid>/mb/post/mysql/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%94%A8mycat/</guid><description>首先，数据库的读写分离，能让应用对数据库的访问压力下降，较之一台数据库服务器来读写的时候。 2台数据库服务器，1台用来执行写操作，1台用来执行读操作，这样能够分散应用对数据的压力，而且能加强数据库的数据</description></item><item><title>Java性能注意点</title><link>/mb/post/java/Java%E6%80%A7%E8%83%BD%E6%B3%A8%E6%84%8F%E7%82%B9/</link><pubDate>Fri, 04 Nov 2016 15:56:32 +0000</pubDate><guid>/mb/post/java/Java%E6%80%A7%E8%83%BD%E6%B3%A8%E6%84%8F%E7%82%B9/</guid><description>参考：http://www.importnew.com/16181.html 1.stringBuilder.append 比 + 号的性能要优。 2.要避免使用正则表达式。 3.避免使用iterator迭代器来循环。尽量使用基本循环和增强for循环。 4</description></item><item><title>github上使用pages来搭建静态网站</title><link>/mb/post/handleway/github%E4%B8%8A%E4%BD%BF%E7%94%A8pages%E6%9D%A5%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</link><pubDate>Fri, 04 Nov 2016 15:44:08 +0000</pubDate><guid>/mb/post/handleway/github%E4%B8%8A%E4%BD%BF%E7%94%A8pages%E6%9D%A5%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</guid><description>1.起因 &amp;amp; 原理剖析 github站点是一款流行的开源代码托管服务，使用git作为版本控制。 而github pages是其提供的一款静态站点服务，让开发者能够将自己的静态网页在线发布出来。 因此有很多大神把自</description></item></channel></rss>